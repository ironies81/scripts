üîß 1. Installer le module ps2exe dans PowerShell
Ouvre une console PowerShell en tant qu‚Äôadministrateur et lance :
=> PowerShell
Install-Module -Name ps2exe -Scope CurrentUser -Force
üîê Si tu as un message de s√©curit√© concernant un d√©p√¥t non approuv√©, tape A (oui pour tout) pour accepter.
__________________________________________________________
üì¶ 2. V√©rifie que le module est bien install√©
Toujours dans PowerShell :
=> PowerShell
Get-Module -ListAvailable ps2exe
S'il appara√Æt, c‚Äôest bon. Sinon relance la commande d'installation.
__________________________________________________________
üßô‚Äç‚ôÇÔ∏è 3. Conversion .ps1 en .exe avec ps2exe
Dans PowerShell, adapte ce chemin √† ton script :
=> PowerShell
ps2exe -inputFile "C:\chemin\vers\ton_script.ps1" `
       -outputFile "C:\chemin\vers\ton_script.exe" `
       -noConsole -iconFile "C:\chemin\vers\une_icone.ico" `
       -x64
üü° L‚Äôoption -noConsole √©vite d‚Äôavoir une fen√™tre noire en fond.
üü° L‚Äôoption -x64 g√©n√®re une appli pour Windows 64 bits (recommand√©).
üü° Tu peux ne pas mettre -iconFile si tu ne veux pas personnaliser l‚Äôic√¥ne.

Site pour les ic√¥nes:
https://icon-icons.com/fr/
__________________________________________________________
üß† Remarques importantes
Si tu utilises [Microsoft.VisualBasic.Interaction], ajoute toujours :
=> PowerShell
Add-Type -AssemblyName Microsoft.VisualBasic
Si tu veux √©viter ce message :
‚ÄúCette application ne peut pas s‚Äôex√©cuter sur votre PC‚Äù,
assure-toi que tu compiles avec -x64 sur un Windows 64 bits, et que tu n‚Äôex√©cutes pas un .exe 32 bits sans compatibilit√©.
__________________________________________________________
üöÄ Lancement
Double-clique ton .exe, ou distribue-le √† tes utilisateurs.
=====================================
Si non utilise mon logiciel => convert_ps1_to.exe
V√©rification et installation des d√©pendances (ps2exe, PowerShell 5+ et Les assemblies .NET)
Fait maison !